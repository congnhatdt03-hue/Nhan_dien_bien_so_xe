# app.py ‚Äî Streamlit + Gemini (·∫£nh), tr·∫£ v·ªÅ JSON + chu·∫©n ho√° bi·ªÉn s·ªë
# Phi√™n b·∫£n t·ªëi ∆∞u: C·∫£i thi·ªán regex, th√™m cache, t·ªëi ∆∞u hi·ªáu su·∫•t v√† b·∫£o m·∫≠t.

import streamlit as st
import google.generativeai as genai
from PIL import Image
import io, os, re, json, time, hashlib

# ====== C·∫•u h√¨nh v√† bi·∫øn m√¥i tr∆∞·ªùng ======
DEFAULT_MODEL_NAME = "gemini-1.5-flash"  # S·ª≠ d·ª•ng model h·ª£p l·ªá
DEFAULT_RETRIES = 2
DEFAULT_DEBUG_MODE = False  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh

# ====== Regex & chu·∫©n ho√° ======
# Kh·ªõp c√°c bi·∫øn th·ªÉ: "37-M1 56341", "37M156341", "37-M1 56.341" (cho ph√©p seri nh∆∞ M1, D1 ch·ª©a s·ªë)
FALLBACK_REGEX = re.compile(
    r"(\d{2})\s*[- ]?\s*([A-Z]{1,2}\d?)\s*[- ]?\s*(\d{4,6})"
)

def normalize_plate(raw: str) -> str:
    """
    Chu·∫©n ho√° chu·ªói bi·ªÉn s·ªë:
    - B·ªè k√Ω t·ª± l·∫°, gi·ªØ A-Z 0-9
    - ƒê·ªãnh d·∫°ng NN-SS DD.DDD ho·∫∑c NN-SS DDD.DD (SS c√≥ th·ªÉ ch·ª©a s·ªë, v√≠ d·ª•: M1, D1)
    """
    s = re.sub(r"[^A-Z0-9]", "", (raw or "").upper())
    m = re.fullmatch(r"(\d{2})([A-Z]{1,2}\d?)(\d{4,6})", s)
    if not m:
        return s
    p, series, num = m.groups()
    # T·ªëi ∆∞u ƒë·ªãnh d·∫°ng s·ªë cu·ªëi d·ª±a tr√™n ƒë·ªô d√†i
    if len(num) == 4:
        formatted_num = f"{num[:2]}.{num[2:]}"
    elif len(num) == 5:
        formatted_num = f"{num[:2]}.{num[3:]}"
    elif len(num) == 6:
        formatted_num = f"{num[:3]}.{num[3:]}"
    else:
        formatted_num = num
    return f"{p}-{series} {formatted_num}"

def dedupe_preserve_order(items):
    seen, out = set(), []
    for x in items:
        if x and x not in seen:
            seen.add(x)
            out.append(x)
    return out

# ====== Model wrapper ======
class GeminiModel:
    def __init__(self, api_key: str, model_name=DEFAULT_MODEL_NAME):
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel(model_name)

    @st.cache_data(ttl=3600, show_spinner=False)  # Cache k·∫øt qu·∫£ 1 gi·ªù
    def extract_text_from_image(self, image_hash: str, image_bytes: bytes, debug_mode: bool = DEFAULT_DEBUG_MODE) -> list:
        """
        Y√™u c·∫ßu Gemini tr·∫£ v·ªÅ JSON array, sau ƒë√≥ parse + chu·∫©n ho√°.
        C√≥ fallback: b√≥c t·ª´ text t·ª± do b·∫±ng regex n·∫øu m√¥ h√¨nh kh√¥ng tu√¢n th·ªß.
        """
        prompt = (
            "Extract ALL Vietnamese vehicle license plates in the image. "
            "Return ONLY a JSON array of uppercase strings with format NN-SS DD.DDD or NN-SS DDD.DD. "
            "Example: ['37-M1 56.341','29-AY 005.40']. Do not add explanations."
        )
        for attempt in range(DEFAULT_RETRIES):
            try:
                img = Image.open(io.BytesIO(image_bytes))
                resp = self.model.generate_content([prompt, img])
                txt = (resp.text or "").strip()

                if debug_mode:
                    st.write("ƒê·∫ßu ra th√¥ t·ª´ Gemini:", txt)

                # G·ª° code-fence n·∫øu c√≥ ```json ... ```
                txt = re.sub(r"^```[a-zA-Z]*\n?", "", txt)
                txt = re.sub(r"\n?```$", "", txt).strip()

                # 1) Th·ª≠ parse JSON ƒë√∫ng chu·∫©n
                plates = []
                try:
                    data = json.loads(txt)
                    if isinstance(data, list):
                        plates = [normalize_plate(str(x)) for x in data]
                        plates = [p for p in plates if re.fullmatch(r"\d{2}-[A-Z]{1,2}\d?\s+\d{2,3}\.\d{2,3}", p)]
                except json.JSONDecodeError as e:
                    if debug_mode:
                        st.write("L·ªói parse JSON:", str(e))

                # 2) Fallback: l√¥i t·ª´ text t·ª± do b·∫±ng regex
                if not plates:
                    U = txt.upper()
                    cand = [normalize_plate("".join(m.groups())) for m in FALLBACK_REGEX.finditer(U)]
                    plates = [p for p in cand if re.fullmatch(r"\d{2}-[A-Z]{1,2}\d?\s+\d{2,3}\.\d{2,3}", p)]

                return dedupe_preserve_order(plates)
            except Exception as e:
                if debug_mode:
                    st.error(f"L·ªói x·ª≠ l√Ω ({attempt + 1}/{DEFAULT_RETRIES}): {str(e)}")
                if attempt < DEFAULT_RETRIES - 1:
                    time.sleep(1.5)
                else:
                    return []
        return []

# ====== Streamlit UI ======
def main():
    st.set_page_config(page_title="Nh·∫≠n Di·ªán Bi·ªÉn S·ªë Xe", page_icon="üîé", layout="wide")
    st.title("Nh·∫≠n Di·ªán Bi·ªÉn S·ªë Xe")

    # T·ªëi ∆∞u b·∫£o m·∫≠t: ·∫®n API key sau khi nh·∫≠p
    if "api_key" not in st.session_state:
        st.session_state["api_key"] = os.getenv("GEMINI_API_KEY") or ""
    api_key = st.session_state["api_key"]
    if not api_key:
        api_key = st.text_input("GEMINI_API_KEY", type="password")
        if api_key:
            st.session_state["api_key"] = api_key
    if not api_key:
        st.info("Nh·∫≠p GEMINI_API_KEY ho·∫∑c c·∫•u h√¨nh bi·∫øn m√¥i tr∆∞·ªùng khi deploy.")
        return

    try:
        gemini = GeminiModel(api_key=st.session_state["api_key"])
    except Exception as e:
        st.error(f"L·ªói c·∫•u h√¨nh API: {str(e)}")
        return

    # Sidebar t√πy ch·ªçn (t·ªëi ∆∞u UX)
    with st.sidebar:
        st.header("T√πy ch·ªçn")
        debug_mode = st.checkbox("B·∫≠t ch·∫ø ƒë·ªô debug", value=DEFAULT_DEBUG_MODE)

    up = st.file_uploader("Ch·ªçn ·∫£nh (JPG/PNG/JPEG)", type=["jpg", "jpeg", "png"])
    if up:
        img_bytes = up.read()
        st.image(img_bytes, caption="·∫¢nh ƒë·∫ßu v√†o", use_column_width=True)
        # T·∫°o hash ·∫£nh ƒë·ªÉ cache
        image_hash = hashlib.md5(img_bytes).hexdigest()
        if st.button("Nh·∫≠n Di·ªán Bi·ªÉn S·ªë"):
            with st.spinner("ƒêang x·ª≠ l√Ω..."):
                plates = gemini.extract_text_from_image(image_hash, img_bytes, debug_mode)
            if plates:
                st.success("K·∫øt qu·∫£ nh·∫≠n di·ªán:")
                for p in plates:
                    st.write(p)
                st.download_button("T·∫£i xu·ªëng k·∫øt qu·∫£", "\n".join(plates),
                                   file_name="plates.txt", mime="text/plain")
            else:
                st.error("Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c bi·ªÉn s·ªë ph√π h·ª£p. H√£y th·ª≠ ·∫£nh r√µ n√©t h∆°n.")

    # Watermark
    st.markdown(
        """
        <div style='position: fixed; bottom: 10px; right: 10px; font-size: 14px; color: gray;'>
            ƒê·ªì √°n II, GVHD: ThS. Nguy·ªÖn Th·ªã Hu·∫ø
        </div>
        """,
        unsafe_allow_html=True
    )

if __name__ == "__main__":
    main()
